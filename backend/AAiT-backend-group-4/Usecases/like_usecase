package usecases

import (
	"context"
	"time"
	"go.mongodb.org/mongo-driver/bson/primitive"
	domain"aait-backend-group4/Domain"
)


type likeUsecase struct{
	blogRepository domain.BlogRepository
	likeReposiotory domain.LikeReposiotory
	contextTimeouts time.Duration
}

type NewLikesUsecase(blogrepository domain.BlogRepository, likeRepository LikeReposiotory, timeouts time.Duration){
	return &likeUsecase{
		blogRepositry: blogrepository,
		likeReposiotory: likeReposiotory,
		contextTimeouts: timeouts,

	}

}

// Like increments the like count for a blog post
func (lu *likeUsecase) Like(ctx context.Context, userID string, blogID string) error {
    ctx, cancel := context.WithTimeout(ctx, lu.contextTimeouts)
    defer cancel()

    // Update the Like status in the like repository
    err := lu.likeReposiotory.Like(ctx, userID, blogID)
    if err != nil {
        return err
    }

    return lu.blogRepository.UpdateFeedback(ctx, blogID, blogRepository.IncrementLikes)
}

func (lu *likeUsecase) Dislike(ctx context.Context, userID string, blogID string) error {
    ctx, cancel := context.WithTimeout(ctx, lu.contextTimeouts)
    defer cancel()

    // Update the Dislike status in the like repository
    err := lu.likeReposiotory.Dislike(ctx, userID, blogID)
    if err != nil {
        return err
    }

    return lu.blogRepository.UpdateFeedback(ctx, blogID, blogRepository.IncrementDislike)
}

func (lu *likeUsecase) RemoveLike(ctx context.Context, likeID string) error {
    ctx, cancel := context.WithTimeout(ctx, lu.contextTimeouts)
    defer cancel()

    err := lu.likeReposiotory.RemoveLike(ctx, likeID)
    if err != nil {
        return err
    }

	like, err := lu.likeReposiotory.GetLikeByID(ctx, likeID)
	if err != nil {
		return err
	}
	blogID := like.BlogID.Hex()

    return lu.blogRepository.UpdateFeedback(ctx, blogID, blogRepository.DecrementLikes)
}

func (lu *likeUsecase) RemoveDislike(ctx context.Context, dislikeID string) error {
    ctx, cancel := context.WithTimeout(ctx, lu.contextTimeouts)
    defer cancel()

    err := lu.likeReposiotory.RemoveDislike(ctx, dislikeID)
    if err != nil {
        return err
    }

	like, err := lu.likeReposiotory.GetLikeByID(ctx, likeID)
	if err != nil {
		return err
	}
	blogID := like.BlogID.Hex()

    return lu.blogRepository.UpdateFeedback(ctx, blogID, blogRepository.DecrementDislikes)
}



func (lu *likeUsecase) GetLikesByUser(ctx context.Context, userID string) ([]domain.Like, error) {
    ctx, cancel := context.WithTimeout(ctx, lu.contextTimeouts)
    defer cancel()

    return lu.likeReposiotory.GetLikesByUser(ctx, userID)
}

func (lu *likeUsecase) GetLikesByBlog(ctx context.Context, blogID string) ([]domain.Like, error) {
    ctx, cancel := context.WithTimeout(ctx, lu.contextTimeouts)
    defer cancel()

    return lu.likeReposiotory.GetLikesByBlog(ctx, blogID)
}