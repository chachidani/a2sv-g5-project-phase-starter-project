// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/RealEskalate/blogpost/domain"
	mock "github.com/stretchr/testify/mock"
)

// Blog_Repository_interface is an autogenerated mock type for the Blog_Repository_interface type
type Blog_Repository_interface struct {
	mock.Mock
}

// CreateBlogDocument provides a mock function with given fields: blog
func (_m *Blog_Repository_interface) CreateBlogDocument(blog domain.Blog) (domain.Blog, error) {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlogDocument")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Blog) (domain.Blog, error)); ok {
		return rf(blog)
	}
	if rf, ok := ret.Get(0).(func(domain.Blog) domain.Blog); ok {
		r0 = rf(blog)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(domain.Blog) error); ok {
		r1 = rf(blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlogDocument provides a mock function with given fields: id
func (_m *Blog_Repository_interface) DeleteBlogDocument(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlogDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterBlogDocument provides a mock function with given fields: filters
func (_m *Blog_Repository_interface) FilterBlogDocument(filters map[string]interface{}) ([]domain.Blog, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for FilterBlogDocument")
	}

	var r0 []domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]domain.Blog, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []domain.Blog); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogDocuments provides a mock function with given fields: offset, limit
func (_m *Blog_Repository_interface) GetBlogDocuments(offset int, limit int) ([]domain.Blog, error) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogDocuments")
	}

	var r0 []domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.Blog, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.Blog); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneBlogDocument provides a mock function with given fields: id
func (_m *Blog_Repository_interface) GetOneBlogDocument(id string) (domain.Blog, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOneBlogDocument")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Blog, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Blog); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlogDocument provides a mock function with given fields: id, blog
func (_m *Blog_Repository_interface) UpdateBlogDocument(id string, blog domain.Blog) (domain.Blog, error) {
	ret := _m.Called(id, blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlogDocument")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.Blog) (domain.Blog, error)); ok {
		return rf(id, blog)
	}
	if rf, ok := ret.Get(0).(func(string, domain.Blog) domain.Blog); ok {
		r0 = rf(id, blog)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(string, domain.Blog) error); ok {
		r1 = rf(id, blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlog_Repository_interface creates a new instance of Blog_Repository_interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlog_Repository_interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Blog_Repository_interface {
	mock := &Blog_Repository_interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
