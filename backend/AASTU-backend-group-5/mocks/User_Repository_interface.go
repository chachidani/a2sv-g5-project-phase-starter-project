// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/RealEskalate/blogpost/domain"
	mock "github.com/stretchr/testify/mock"
)

// User_Repository_interface is an autogenerated mock type for the User_Repository_interface type
type User_Repository_interface struct {
	mock.Mock
}

// DeleteUserDocument provides a mock function with given fields: id
func (_m *User_Repository_interface) DeleteUserDocument(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DemoteUser provides a mock function with given fields: id
func (_m *User_Repository_interface) DemoteUser(id string) (domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DemoteUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterUserDocument provides a mock function with given fields: filter
func (_m *User_Repository_interface) FilterUserDocument(filter map[string]string) ([]domain.User, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for FilterUserDocument")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) ([]domain.User, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) []domain.User); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDocumentByID provides a mock function with given fields: id
func (_m *User_Repository_interface) GetUserDocumentByID(id string) (domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDocumentByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDocuments provides a mock function with given fields:
func (_m *User_Repository_interface) GetUserDocuments() ([]domain.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserDocuments")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromoteUser provides a mock function with given fields: id
func (_m *User_Repository_interface) PromoteUser(id string) (domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserDocument provides a mock function with given fields: id, user
func (_m *User_Repository_interface) UpdateUserDocument(id string, user domain.UpdateUser) (domain.User, error) {
	ret := _m.Called(id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserDocument")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.UpdateUser) (domain.User, error)); ok {
		return rf(id, user)
	}
	if rf, ok := ret.Get(0).(func(string, domain.UpdateUser) domain.User); ok {
		r0 = rf(id, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, domain.UpdateUser) error); ok {
		r1 = rf(id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPassword provides a mock function with given fields: id, new_hashed_password
func (_m *User_Repository_interface) UpdateUserPassword(id string, new_hashed_password string) (domain.User, error) {
	ret := _m.Called(id, new_hashed_password)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPassword")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.User, error)); ok {
		return rf(id, new_hashed_password)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.User); ok {
		r0 = rf(id, new_hashed_password)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, new_hashed_password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser_Repository_interface creates a new instance of User_Repository_interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser_Repository_interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *User_Repository_interface {
	mock := &User_Repository_interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
