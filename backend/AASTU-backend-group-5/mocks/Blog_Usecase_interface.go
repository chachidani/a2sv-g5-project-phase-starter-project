// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/RealEskalate/blogpost/domain"
	mock "github.com/stretchr/testify/mock"
)

// Blog_Usecase_interface is an autogenerated mock type for the Blog_Usecase_interface type
type Blog_Usecase_interface struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: iblog
func (_m *Blog_Usecase_interface) CreateBlog(iblog domain.PostBlog) (domain.Blog, error) {
	ret := _m.Called(iblog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.PostBlog) (domain.Blog, error)); ok {
		return rf(iblog)
	}
	if rf, ok := ret.Get(0).(func(domain.PostBlog) domain.Blog); ok {
		r0 = rf(iblog)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(domain.PostBlog) error); ok {
		r1 = rf(iblog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlog provides a mock function with given fields: id
func (_m *Blog_Usecase_interface) DeleteBlog(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterBlog provides a mock function with given fields: filters
func (_m *Blog_Usecase_interface) FilterBlog(filters map[string]interface{}) ([]domain.Blog, error) {
	ret := _m.Called(filters)

	if len(ret) == 0 {
		panic("no return value specified for FilterBlog")
	}

	var r0 []domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) ([]domain.Blog, error)); ok {
		return rf(filters)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) []domain.Blog); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogs provides a mock function with given fields: limit, page_number
func (_m *Blog_Usecase_interface) GetBlogs(limit int, page_number int) ([]domain.Blog, error) {
	ret := _m.Called(limit, page_number)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogs")
	}

	var r0 []domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.Blog, error)); ok {
		return rf(limit, page_number)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.Blog); ok {
		r0 = rf(limit, page_number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, page_number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneBlog provides a mock function with given fields: id
func (_m *Blog_Usecase_interface) GetOneBlog(id string) (domain.Blog, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOneBlog")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Blog, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Blog); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlog provides a mock function with given fields: id, blog
func (_m *Blog_Usecase_interface) UpdateBlog(id string, blog domain.Blog) (domain.Blog, error) {
	ret := _m.Called(id, blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.Blog) (domain.Blog, error)); ok {
		return rf(id, blog)
	}
	if rf, ok := ret.Get(0).(func(string, domain.Blog) domain.Blog); ok {
		r0 = rf(id, blog)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(string, domain.Blog) error); ok {
		r1 = rf(id, blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlog_Usecase_interface creates a new instance of Blog_Usecase_interface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlog_Usecase_interface(t interface {
	mock.TestingT
	Cleanup(func())
}) *Blog_Usecase_interface {
	mock := &Blog_Usecase_interface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
